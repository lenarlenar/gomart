// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lenarlenar/gomart/internal/interfaces (interfaces: AccrualService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_accrual.go . AccrualService
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccrualService is a mock of AccrualService interface.
type MockAccrualService struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualServiceMockRecorder
	isgomock struct{}
}

// MockAccrualServiceMockRecorder is the mock recorder for MockAccrualService.
type MockAccrualServiceMockRecorder struct {
	mock *MockAccrualService
}

// NewMockAccrualService creates a new mock instance.
func NewMockAccrualService(ctrl *gomock.Controller) *MockAccrualService {
	mock := &MockAccrualService{ctrl: ctrl}
	mock.recorder = &MockAccrualServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualService) EXPECT() *MockAccrualServiceMockRecorder {
	return m.recorder
}

// Calculate mocks base method.
func (m *MockAccrualService) Calculate(orderID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Calculate", orderID)
}

// Calculate indicates an expected call of Calculate.
func (mr *MockAccrualServiceMockRecorder) Calculate(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockAccrualService)(nil).Calculate), orderID)
}

// StartCalculation mocks base method.
func (m *MockAccrualService) StartCalculation() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCalculation")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCalculation indicates an expected call of StartCalculation.
func (mr *MockAccrualServiceMockRecorder) StartCalculation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCalculation", reflect.TypeOf((*MockAccrualService)(nil).StartCalculation))
}
