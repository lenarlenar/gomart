// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lenarlenar/gomart/internal/interfaces (interfaces: AuthStorage)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_storage.go . AuthStorage
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	models "github.com/lenarlenar/gomart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthStorage is a mock of AuthStorage interface.
type MockAuthStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStorageMockRecorder
	isgomock struct{}
}

// MockAuthStorageMockRecorder is the mock recorder for MockAuthStorage.
type MockAuthStorageMockRecorder struct {
	mock *MockAuthStorage
}

// NewMockAuthStorage creates a new mock instance.
func NewMockAuthStorage(ctrl *gomock.Controller) *MockAuthStorage {
	mock := &MockAuthStorage{ctrl: ctrl}
	mock.recorder = &MockAuthStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStorage) EXPECT() *MockAuthStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthStorage) CreateUser(name, hashPass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", name, hashPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthStorageMockRecorder) CreateUser(name, hashPass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthStorage)(nil).CreateUser), name, hashPass)
}

// GetUser mocks base method.
func (m *MockAuthStorage) GetUser(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthStorageMockRecorder) GetUser(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthStorage)(nil).GetUser), username)
}
