// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lenarlenar/gomart/internal/interfaces (interfaces: OrdersService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_order.go . OrdersService
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	models "github.com/lenarlenar/gomart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockOrdersService is a mock of OrdersService interface.
type MockOrdersService struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersServiceMockRecorder
	isgomock struct{}
}

// MockOrdersServiceMockRecorder is the mock recorder for MockOrdersService.
type MockOrdersServiceMockRecorder struct {
	mock *MockOrdersService
}

// NewMockOrdersService creates a new mock instance.
func NewMockOrdersService(ctrl *gomock.Controller) *MockOrdersService {
	mock := &MockOrdersService{ctrl: ctrl}
	mock.recorder = &MockOrdersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersService) EXPECT() *MockOrdersServiceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockOrdersService) Check(orderID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", orderID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockOrdersServiceMockRecorder) Check(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockOrdersService)(nil).Check), orderID)
}

// CreateOrder mocks base method.
func (m *MockOrdersService) CreateOrder(orderID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", orderID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersServiceMockRecorder) CreateOrder(orderID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersService)(nil).CreateOrder), orderID, userID)
}

// GetOrders mocks base method.
func (m *MockOrdersService) GetOrders(userID string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrdersServiceMockRecorder) GetOrders(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrdersService)(nil).GetOrders), userID)
}
